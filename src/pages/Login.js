import React from 'react'

// breadcrumb
import MyBreadCrumb from '../components/MyBreadCrumb'

function Login(props) {
  const btn = (
    <>
      <h1>未登入</h1>
      <button
        onClick={() => {
          setIsAuth(true)
        }}
      >
        登入
      </button>
    </>
  )

  const out = (
    <>
      <h1>燈出</h1>
      <button
        onClick={() => {
          setIsAuth(false)
        }}
      >
        登出
      </button>
    </>
  )
  // 從app元件得到兩個屬性值 , 解構出來
  const { isAuth, setIsAuth } = props

  return (
    <>
      <h1>會員登入頁面</h1>
      <MyBreadCrumb />

      {isAuth ? out : btn}

      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <p>
        在表達式中，我們有講到在表達式中有無副作用(Side
        Effect)的分別，函式也有這種區分方式。對於函式來說，具有副作用代表著可能會更動到外部環境，或是更動到傳入的參數值。函式的區分是以
        純粹(pure)函式 與 不純粹(impure)函式
        兩者來區分，但這不光只有無副作用的差異，還有其他的條件。
      </p>
      <button onClick={() => props.history.push('/about')}>
        關於我們
      </button>
    </>
  )
}

export default Login
